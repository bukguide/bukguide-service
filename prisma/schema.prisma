generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex", "fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model blog {
  id             Int              @id @default(autoincrement())
  title          String
  content        String
  key_word       String?
  user_id        Int
  created_at     DateTime?        @db.Timestamp(6)
  user_info      user_info        @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  blog_tag       blog_tag[]
  blog_type_tour blog_type_tour[]
  image_blog     image_blog[]
}

model blog_tag {
  blog_id Int
  tag_id  Int
  id      Int  @id @default(autoincrement())
  blog    blog @relation(fields: [blog_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tag     tag  @relation(fields: [tag_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model blog_type_tour {
  blog_id      Int
  type_tour_id Int
  id           Int       @id(map: "blog_type_toure_pkey") @default(autoincrement()) @db.SmallInt
  blog         blog      @relation(fields: [blog_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "blog_type_toure_blog_id_fkey")
  type_tour    type_tour @relation(fields: [type_tour_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "blog_type_toure_type_toure_id_fkey")
}

model chat_message {
  id                                          Int       @id @default(autoincrement())
  user1_id                                    Int
  user2_id                                    Int
  user_send                                   Int
  time                                        DateTime  @db.Timestamp(6)
  message                                     String
  user_info_chat_message_user1_idTouser_info  user_info @relation("chat_message_user1_idTouser_info", fields: [user1_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_info_chat_message_user2_idTouser_info  user_info @relation("chat_message_user2_idTouser_info", fields: [user2_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_info_chat_message_user_sendTouser_info user_info @relation("chat_message_user_sendTouser_info", fields: [user_send], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model expertise {
  id             Int              @id @default(autoincrement())
  name           String
  user_expertise user_expertise[]
}

model image_blog {
  id        Int    @id @default(autoincrement())
  file_name String
  blog_id   Int
  blog      blog   @relation(fields: [blog_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model language {
  id            Int             @id @default(autoincrement())
  name          String
  user_language user_language[]
}

model location {
  id            Int             @id(map: "localtion_pkey") @default(autoincrement())
  name          String
  user_location user_location[]
}

model permission {
  id        Int         @id @default(autoincrement())
  role      String      @db.VarChar
  user_info user_info[]
}

model tag {
  id       Int        @id @default(autoincrement())
  name     String
  blog_tag blog_tag[]
}

model type_tour {
  id             Int              @id(map: "type_toure_pkey") @default(autoincrement())
  name           String
  blog_type_tour blog_type_tour[]
  user_type_tour user_type_tour[]
}

model user_expertise {
  id           Int       @id @default(autoincrement())
  expertise_id Int
  user_id      Int
  expertise    expertise @relation(fields: [expertise_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_info    user_info @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user_info {
  id                                             Int              @id @default(autoincrement())
  name                                           String?
  emirates_id                                    String?
  license_no                                     String?          @db.VarChar
  expiry_date                                    DateTime?        @db.Date
  permission_id                                  Int
  email                                          String?          @db.VarChar
  number_phone                                   String?          @db.VarChar
  created_at                                     DateTime?        @db.Timestamp(6)
  updated_at                                     DateTime?        @db.Timestamp(6)
  password                                       String?
  approve                                        Boolean?
  avatar                                         String?
  blog                                           blog[]
  chat_message_chat_message_user1_idTouser_info  chat_message[]   @relation("chat_message_user1_idTouser_info")
  chat_message_chat_message_user2_idTouser_info  chat_message[]   @relation("chat_message_user2_idTouser_info")
  chat_message_chat_message_user_sendTouser_info chat_message[]   @relation("chat_message_user_sendTouser_info")
  user_expertise                                 user_expertise[]
  permission                                     permission       @relation(fields: [permission_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_language                                  user_language[]
  user_location                                  user_location[]
  user_type_tour                                 user_type_tour[]
}

model user_language {
  user_id     Int
  language_id Int
  id          Int       @id @default(autoincrement())
  language    language  @relation(fields: [language_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_info   user_info @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user_location {
  user_id     Int
  location_id Int
  id          Int       @id @default(autoincrement())
  location    location  @relation(fields: [location_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_info   user_info @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user_type_tour {
  user_id      Int
  type_tour_id Int
  id           Int       @id(map: "user_type_toure_pkey") @default(autoincrement())
  type_tour    type_tour @relation(fields: [type_tour_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_type_toure_type_toure_id_fkey")
  user_info    user_info @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_type_toure_user_id_fkey")
}
